// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityTuitionPayment.Context;
using UniversityTuitionPayment.Model;

#nullable disable

namespace UniversityTuitionPayment.Migrations
{
    [DbContext(typeof(UniversityTuitionPaymentContext))]
    partial class UniversityTuitionPaymentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UniversityTuitionPayment.Model.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("TCKimlik")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .IsUnique();

                    b.HasIndex("TCKimlik")
                        .IsUnique();

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StudentStatus")
                        .HasColumnType("int");

                    b.Property<string>("TCKimlik")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("universityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentCode")
                        .IsUnique();

                    b.HasIndex("TCKimlik")
                        .IsUnique();

                    b.HasIndex("universityId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.Tuition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<double>("TuitionPaid")
                        .HasColumnType("float");

                    b.Property<double>("TuitionTotal")
                        .HasColumnType("float");

                    b.Property<int>("currentTermId")
                        .HasColumnType("int");

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("universityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("currentTermId");

                    b.HasIndex("studentId");

                    b.HasIndex("universityId");

                    b.ToTable("Tuition");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentTermId")
                        .HasColumnType("int");

                    b.Property<double>("TuitionFee")
                        .HasColumnType("float");

                    b.Property<string>("UniversityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTermId");

                    b.HasIndex("UniversityCode")
                        .IsUnique();

                    b.ToTable("University");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.Student", b =>
                {
                    b.HasOne("UniversityTuitionPayment.Model.University", "university")
                        .WithMany("Students")
                        .HasForeignKey("universityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("university");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.Term", b =>
                {
                    b.HasOne("UniversityTuitionPayment.Model.University", null)
                        .WithMany("Terms")
                        .HasForeignKey("UniversityId");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.Tuition", b =>
                {
                    b.HasOne("UniversityTuitionPayment.Model.Term", "currentTerm")
                        .WithMany()
                        .HasForeignKey("currentTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniversityTuitionPayment.Model.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniversityTuitionPayment.Model.University", "university")
                        .WithMany()
                        .HasForeignKey("universityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("currentTerm");

                    b.Navigation("student");

                    b.Navigation("university");
    
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.University", b =>
                {
                    b.HasOne("UniversityTuitionPayment.Model.Term", "CurrentTerm")
                        .WithMany()
                        .HasForeignKey("CurrentTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentTerm");
                });

            modelBuilder.Entity("UniversityTuitionPayment.Model.University", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Terms");
                });
#pragma warning restore 612, 618
        }
    }
}
